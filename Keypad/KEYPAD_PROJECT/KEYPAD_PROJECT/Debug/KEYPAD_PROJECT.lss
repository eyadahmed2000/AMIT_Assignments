
KEYPAD_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000016a  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800070  00800070  0000020e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000716  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061f  00000000  00000000  000009d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002eb  00000000  00000000  00000ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  000012dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b3  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000016d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 37       	cpi	r26, 0x75	; 117
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 94 00 	call	0x128	; 0x128 <main>
  8a:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <key_pressed>:
 */ 
 #include "Keypad.h"
 unsigned char x[16]={'7','8','9','/','4','5','6','*','1','2','3','-','C','0','=','+'};
 unsigned char col,row,keypress,row_cou;
 unsigned int key_pressed()
 {	for (row=0;row<NUM_row;row++) //loop to set the (nth) row by zero
  92:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <row>
 {	PORTB|=0xf0;				//set all bits high
	CLR_BIT(PORTB,(4+row));		//set the bit(4+row)=0
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	70 e0       	ldi	r23, 0x00	; 0
	for (col=0;col<NUM_col;col++)
  9a:	e1 e0       	ldi	r30, 0x01	; 1
 #include "Keypad.h"
 unsigned char x[16]={'7','8','9','/','4','5','6','*','1','2','3','-','C','0','=','+'};
 unsigned char col,row,keypress,row_cou;
 unsigned int key_pressed()
 {	for (row=0;row<NUM_row;row++) //loop to set the (nth) row by zero
 {	PORTB|=0xf0;				//set all bits high
  9c:	88 b3       	in	r24, 0x18	; 24
  9e:	80 6f       	ori	r24, 0xF0	; 240
  a0:	88 bb       	out	0x18, r24	; 24
	CLR_BIT(PORTB,(4+row));		//set the bit(4+row)=0
  a2:	98 b3       	in	r25, 0x18	; 24
  a4:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <row>
  a8:	8c 5f       	subi	r24, 0xFC	; 252
  aa:	9b 01       	movw	r18, r22
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <key_pressed+0x20>
  ae:	22 0f       	add	r18, r18
  b0:	33 1f       	adc	r19, r19
  b2:	8a 95       	dec	r24
  b4:	e2 f7       	brpl	.-8      	; 0xae <key_pressed+0x1c>
  b6:	82 2f       	mov	r24, r18
  b8:	80 95       	com	r24
  ba:	89 23       	and	r24, r25
  bc:	88 bb       	out	0x18, r24	; 24
	for (col=0;col<NUM_col;col++)
  be:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <col>
	{	if (GET_BIT(PIND,(4+col))==0)
  c2:	80 b3       	in	r24, 0x10	; 16
  c4:	28 2f       	mov	r18, r24
  c6:	20 71       	andi	r18, 0x10	; 16
  c8:	84 fd       	sbrc	r24, 4
  ca:	28 c0       	rjmp	.+80     	; 0x11c <key_pressed+0x8a>
  cc:	0a c0       	rjmp	.+20     	; 0xe2 <key_pressed+0x50>
  ce:	80 b3       	in	r24, 0x10	; 16
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	04 2e       	mov	r0, r20
  d4:	02 c0       	rjmp	.+4      	; 0xda <key_pressed+0x48>
  d6:	95 95       	asr	r25
  d8:	87 95       	ror	r24
  da:	0a 94       	dec	r0
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <key_pressed+0x44>
  de:	80 fd       	sbrc	r24, 0
  e0:	0e c0       	rjmp	.+28     	; 0xfe <key_pressed+0x6c>
		{	keypress=(row*NUM_col)+col;	
  e2:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <row>
  e6:	ee 0f       	add	r30, r30
  e8:	ee 0f       	add	r30, r30
  ea:	2e 0f       	add	r18, r30
  ec:	20 93 72 00 	sts	0x0072, r18	; 0x800072 <keypress>
			return x[keypress];
  f0:	e2 2f       	mov	r30, r18
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	e0 5a       	subi	r30, 0xA0	; 160
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	80 81       	ld	r24, Z
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	08 95       	ret
 unsigned char col,row,keypress,row_cou;
 unsigned int key_pressed()
 {	for (row=0;row<NUM_row;row++) //loop to set the (nth) row by zero
 {	PORTB|=0xf0;				//set all bits high
	CLR_BIT(PORTB,(4+row));		//set the bit(4+row)=0
	for (col=0;col<NUM_col;col++)
  fe:	2f 5f       	subi	r18, 0xFF	; 255
 100:	20 93 71 00 	sts	0x0071, r18	; 0x800071 <col>
 104:	4f 5f       	subi	r20, 0xFF	; 255
 106:	5f 4f       	sbci	r21, 0xFF	; 255
 108:	24 30       	cpi	r18, 0x04	; 4
 10a:	09 f7       	brne	.-62     	; 0xce <key_pressed+0x3c>
 */ 
 #include "Keypad.h"
 unsigned char x[16]={'7','8','9','/','4','5','6','*','1','2','3','-','C','0','=','+'};
 unsigned char col,row,keypress,row_cou;
 unsigned int key_pressed()
 {	for (row=0;row<NUM_row;row++) //loop to set the (nth) row by zero
 10c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <row>
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <row>
 116:	84 30       	cpi	r24, 0x04	; 4
 118:	08 f2       	brcs	.-126    	; 0x9c <key_pressed+0xa>
			return x[keypress];
		}// if statment curly braces
	}//2nd for loop curly braces
	
 }//1st for loop curly braces
 }// function curly braces
 11a:	08 95       	ret
 unsigned char col,row,keypress,row_cou;
 unsigned int key_pressed()
 {	for (row=0;row<NUM_row;row++) //loop to set the (nth) row by zero
 {	PORTB|=0xf0;				//set all bits high
	CLR_BIT(PORTB,(4+row));		//set the bit(4+row)=0
	for (col=0;col<NUM_col;col++)
 11c:	e0 93 71 00 	sts	0x0071, r30	; 0x800071 <col>
 120:	45 e0       	ldi	r20, 0x05	; 5
 122:	50 e0       	ldi	r21, 0x00	; 0
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	d3 cf       	rjmp	.-90     	; 0xce <key_pressed+0x3c>

00000128 <main>:
#include "Keypad.h"
#include <util/delay.h>
unsigned char key;

int main(void)
{	DDRB|=0xf0;
 128:	87 b3       	in	r24, 0x17	; 23
 12a:	80 6f       	ori	r24, 0xF0	; 240
 12c:	87 bb       	out	0x17, r24	; 23
	DDRD&=~0xf0;
 12e:	81 b3       	in	r24, 0x11	; 17
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	81 bb       	out	0x11, r24	; 17
	DDRB|=(1<<0);
 134:	b8 9a       	sbi	0x17, 0	; 23
	PORTD|=0xF0;
 136:	82 b3       	in	r24, 0x12	; 18
 138:	80 6f       	ori	r24, 0xF0	; 240
 13a:	82 bb       	out	0x12, r24	; 18
	PORTB|=0xF0;
 13c:	88 b3       	in	r24, 0x18	; 24
 13e:	80 6f       	ori	r24, 0xF0	; 240
 140:	88 bb       	out	0x18, r24	; 24
    
    while (1) 
    {	key=key_pressed();
 142:	0e 94 49 00 	call	0x92	; 0x92 <key_pressed>
 146:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <key>
		if (key=='7')
 14a:	87 33       	cpi	r24, 0x37	; 55
 14c:	d1 f7       	brne	.-12     	; 0x142 <main+0x1a>
		{PORTB|=(1<<0);
 14e:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	2a ea       	ldi	r18, 0xAA	; 170
 152:	36 ee       	ldi	r19, 0xE6	; 230
 154:	86 e9       	ldi	r24, 0x96	; 150
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	30 40       	sbci	r19, 0x00	; 0
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	d9 f7       	brne	.-10     	; 0x158 <main+0x30>
 162:	00 00       	nop
 164:	ee cf       	rjmp	.-36     	; 0x142 <main+0x1a>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
