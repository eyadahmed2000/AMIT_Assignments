
Keypad+lcd+motor(directions).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000033c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  0000033c  000003d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000fa  008000fa  0000046a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e2b  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000751  00000000  00000000  00001393  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000613  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  000020f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000403  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000059b  00000000  00000000  000025f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002b8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3f       	cpi	r26, 0xFA	; 250
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa ef       	ldi	r26, 0xFA	; 250
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 3f       	cpi	r26, 0xFF	; 255
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 16 01 	call	0x22c	; 0x22c <main>
  8a:	0c 94 9c 01 	jmp	0x338	; 0x338 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <key_pressed>:
 */ 
 #include "Keypad.h"
 unsigned char x[17]={'7','8','9','/','4','5','6','*','1','2','3','-','C','0','=','+','a'};
 unsigned char col,row,keypress,row_cou;
 unsigned int key_pressed()
 {	for (row=0;row<NUM_row;row++)		//loop to set the (nth) row by zero
  92:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <row>
 {	PORTD|=0x0f;						//set all bits high
	CLR_BIT(PORTD,(row));				//set the bit(4+row)=0
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	70 e0       	ldi	r23, 0x00	; 0
	for (col=0;col<NUM_col;col++)
  9a:	e1 e0       	ldi	r30, 0x01	; 1
 #include "Keypad.h"
 unsigned char x[17]={'7','8','9','/','4','5','6','*','1','2','3','-','C','0','=','+','a'};
 unsigned char col,row,keypress,row_cou;
 unsigned int key_pressed()
 {	for (row=0;row<NUM_row;row++)		//loop to set the (nth) row by zero
 {	PORTD|=0x0f;						//set all bits high
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	8f 60       	ori	r24, 0x0F	; 15
  a0:	82 bb       	out	0x12, r24	; 18
	CLR_BIT(PORTD,(row));				//set the bit(4+row)=0
  a2:	92 b3       	in	r25, 0x12	; 18
  a4:	9b 01       	movw	r18, r22
  a6:	00 90 fd 00 	lds	r0, 0x00FD	; 0x8000fd <row>
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <key_pressed+0x1e>
  ac:	22 0f       	add	r18, r18
  ae:	33 1f       	adc	r19, r19
  b0:	0a 94       	dec	r0
  b2:	e2 f7       	brpl	.-8      	; 0xac <key_pressed+0x1a>
  b4:	82 2f       	mov	r24, r18
  b6:	80 95       	com	r24
  b8:	89 23       	and	r24, r25
  ba:	82 bb       	out	0x12, r24	; 18
	for (col=0;col<NUM_col;col++)
  bc:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <col>
	{	if (GET_BIT(PIND,(4+col))==0)
  c0:	80 b3       	in	r24, 0x10	; 16
  c2:	28 2f       	mov	r18, r24
  c4:	20 71       	andi	r18, 0x10	; 16
  c6:	84 fd       	sbrc	r24, 4
  c8:	2b c0       	rjmp	.+86     	; 0x120 <key_pressed+0x8e>
  ca:	0a c0       	rjmp	.+20     	; 0xe0 <key_pressed+0x4e>
  cc:	80 b3       	in	r24, 0x10	; 16
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	04 2e       	mov	r0, r20
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <key_pressed+0x46>
  d4:	95 95       	asr	r25
  d6:	87 95       	ror	r24
  d8:	0a 94       	dec	r0
  da:	e2 f7       	brpl	.-8      	; 0xd4 <key_pressed+0x42>
  dc:	80 fd       	sbrc	r24, 0
  de:	0e c0       	rjmp	.+28     	; 0xfc <key_pressed+0x6a>
		{	keypress=(row*NUM_col)+col;	
  e0:	e0 91 fd 00 	lds	r30, 0x00FD	; 0x8000fd <row>
  e4:	ee 0f       	add	r30, r30
  e6:	ee 0f       	add	r30, r30
  e8:	2e 0f       	add	r18, r30
  ea:	20 93 fc 00 	sts	0x00FC, r18	; 0x8000fc <keypress>
			return x[keypress];
  ee:	e2 2f       	mov	r30, r18
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	e0 5a       	subi	r30, 0xA0	; 160
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
  f6:	80 81       	ld	r24, Z
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	08 95       	ret
 unsigned char col,row,keypress,row_cou;
 unsigned int key_pressed()
 {	for (row=0;row<NUM_row;row++)		//loop to set the (nth) row by zero
 {	PORTD|=0x0f;						//set all bits high
	CLR_BIT(PORTD,(row));				//set the bit(4+row)=0
	for (col=0;col<NUM_col;col++)
  fc:	2f 5f       	subi	r18, 0xFF	; 255
  fe:	20 93 fb 00 	sts	0x00FB, r18	; 0x8000fb <col>
 102:	4f 5f       	subi	r20, 0xFF	; 255
 104:	5f 4f       	sbci	r21, 0xFF	; 255
 106:	24 30       	cpi	r18, 0x04	; 4
 108:	09 f7       	brne	.-62     	; 0xcc <key_pressed+0x3a>
 */ 
 #include "Keypad.h"
 unsigned char x[17]={'7','8','9','/','4','5','6','*','1','2','3','-','C','0','=','+','a'};
 unsigned char col,row,keypress,row_cou;
 unsigned int key_pressed()
 {	for (row=0;row<NUM_row;row++)		//loop to set the (nth) row by zero
 10a:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <row>
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <row>
 114:	84 30       	cpi	r24, 0x04	; 4
 116:	10 f2       	brcs	.-124    	; 0x9c <key_pressed+0xa>
			return x[keypress];
		}// if statment curly braces
	}//2nd for loop curly braces
	
 }//1st for loop curly braces
 return x[16];
 118:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_start+0x10>
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	08 95       	ret
 unsigned char col,row,keypress,row_cou;
 unsigned int key_pressed()
 {	for (row=0;row<NUM_row;row++)		//loop to set the (nth) row by zero
 {	PORTD|=0x0f;						//set all bits high
	CLR_BIT(PORTD,(row));				//set the bit(4+row)=0
	for (col=0;col<NUM_col;col++)
 120:	e0 93 fb 00 	sts	0x00FB, r30	; 0x8000fb <col>
 124:	45 e0       	ldi	r20, 0x05	; 5
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	d0 cf       	rjmp	.-96     	; 0xcc <key_pressed+0x3a>

0000012c <LCD_Command>:
Send lower nibble of command.
Give High to Low pulse at Enable (E).
*/
void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);/* Sending upper nibble */
 12c:	9b b3       	in	r25, 0x1b	; 27
 12e:	9f 70       	andi	r25, 0x0F	; 15
 130:	28 2f       	mov	r18, r24
 132:	20 7f       	andi	r18, 0xF0	; 240
 134:	92 2b       	or	r25, r18
 136:	9b bb       	out	0x1b, r25	; 27
	LCD_Port_Control &= ~ (1<<RS);		/* RS=0, command reg. */
 138:	c1 98       	cbi	0x18, 1	; 24
	LCD_Port_Control |= (1<<EN);		/* Enable pulse */
 13a:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	35 e3       	ldi	r19, 0x35	; 53
 13e:	3a 95       	dec	r19
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_Command+0x12>
 142:	00 00       	nop
	_delay_us(10);
	LCD_Port_Control &= ~ (1<<EN);
 144:	c3 98       	cbi	0x18, 3	; 24
 146:	ef e3       	ldi	r30, 0x3F	; 63
 148:	ff e1       	ldi	r31, 0x1F	; 31
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_Command+0x1e>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_Command+0x24>
 150:	00 00       	nop
	_delay_us(2000);
	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);/* Sending lower nibble */
 152:	2b b3       	in	r18, 0x1b	; 27
 154:	2f 70       	andi	r18, 0x0F	; 15
 156:	f0 e1       	ldi	r31, 0x10	; 16
 158:	8f 9f       	mul	r24, r31
 15a:	c0 01       	movw	r24, r0
 15c:	11 24       	eor	r1, r1
 15e:	82 2b       	or	r24, r18
 160:	8b bb       	out	0x1b, r24	; 27
	LCD_Port_Control |= (1<<EN);
 162:	c3 9a       	sbi	0x18, 3	; 24
 164:	35 e0       	ldi	r19, 0x05	; 5
 166:	3a 95       	dec	r19
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD_Command+0x3a>
 16a:	00 00       	nop
	_delay_us(1);
	LCD_Port_Control &= ~ (1<<EN);
 16c:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	8f e3       	ldi	r24, 0x3F	; 63
 170:	9f e1       	ldi	r25, 0x1F	; 31
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_Command+0x46>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_Command+0x4c>
 178:	00 00       	nop
 17a:	08 95       	ret

0000017c <LCD_Init>:
Send any Display ON command (0x0E, 0x0C)
Send 0x06 command (increment cursor)
*/
void LCD_Init (void)  /* LCD Initialize function */
{
	LCD_Dir = 0xFF;		/* Make LCD port direction as o/p */
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	8a bb       	out	0x1a, r24	; 26
	LCD_Dir_Control=0x0F; /* Make LCD port direction as o/p */
 180:	8f e0       	ldi	r24, 0x0F	; 15
 182:	87 bb       	out	0x17, r24	; 23
	LCD_Port_Control &= ~(1<<2);
 184:	c2 98       	cbi	0x18, 2	; 24
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	89 ef       	ldi	r24, 0xF9	; 249
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <LCD_Init+0x10>
 194:	00 c0       	rjmp	.+0      	; 0x196 <LCD_Init+0x1a>
 196:	00 00       	nop
	_delay_ms(20);		/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x33);
 198:	83 e3       	ldi	r24, 0x33	; 51
 19a:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_Command>
	LCD_Command(0x32);	/* Send for 4 bit initialization of LCD  */
 19e:	82 e3       	ldi	r24, 0x32	; 50
 1a0:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_Command>
	LCD_Command(0x28);	/* 2 line, 5*7 matrix in 4-bit mode */
 1a4:	88 e2       	ldi	r24, 0x28	; 40
 1a6:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_Command>
	LCD_Command(0x0c);	/* Display on cursor off */
 1aa:	8c e0       	ldi	r24, 0x0C	; 12
 1ac:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_Command>
	LCD_Command(0x06);	/* Increment cursor (shift cursor to right) */
 1b0:	86 e0       	ldi	r24, 0x06	; 6
 1b2:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_Command>
	LCD_Command(0x01);	/* Clear display screen */
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_Command>
 1bc:	08 95       	ret

000001be <LCD_Char>:
Send lower nibble of data.
Give High to Low pulse at Enable (E).
*/
void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);/* Sending upper nibble */
 1be:	9b b3       	in	r25, 0x1b	; 27
 1c0:	9f 70       	andi	r25, 0x0F	; 15
 1c2:	28 2f       	mov	r18, r24
 1c4:	20 7f       	andi	r18, 0xF0	; 240
 1c6:	92 2b       	or	r25, r18
 1c8:	9b bb       	out	0x1b, r25	; 27
	LCD_Port_Control |= (1<<RS);  /* RS=1, data reg. */
 1ca:	c1 9a       	sbi	0x18, 1	; 24
	LCD_Port_Control|= (1<<EN);
 1cc:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	35 e3       	ldi	r19, 0x35	; 53
 1d0:	3a 95       	dec	r19
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <LCD_Char+0x12>
 1d4:	00 00       	nop
	_delay_us(10);
	LCD_Port_Control &= ~ (1<<EN);
 1d6:	c3 98       	cbi	0x18, 3	; 24
 1d8:	ef e1       	ldi	r30, 0x1F	; 31
 1da:	f3 e0       	ldi	r31, 0x03	; 3
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_Char+0x1e>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_Char+0x24>
 1e2:	00 00       	nop
	_delay_us(200);
	LCD_Port = (LCD_Port & 0x0F) | (data << 4);  /* Sending lower nibble */
 1e4:	2b b3       	in	r18, 0x1b	; 27
 1e6:	2f 70       	andi	r18, 0x0F	; 15
 1e8:	f0 e1       	ldi	r31, 0x10	; 16
 1ea:	8f 9f       	mul	r24, r31
 1ec:	c0 01       	movw	r24, r0
 1ee:	11 24       	eor	r1, r1
 1f0:	82 2b       	or	r24, r18
 1f2:	8b bb       	out	0x1b, r24	; 27
	LCD_Port_Control |= (1<<EN);
 1f4:	c3 9a       	sbi	0x18, 3	; 24
 1f6:	35 e3       	ldi	r19, 0x35	; 53
 1f8:	3a 95       	dec	r19
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCD_Char+0x3a>
 1fc:	00 00       	nop
	_delay_us(10);
	LCD_Port_Control &= ~ (1<<EN);
 1fe:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	8f e5       	ldi	r24, 0x5F	; 95
 202:	9d e6       	ldi	r25, 0x6D	; 109
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <LCD_Char+0x46>
 208:	00 c0       	rjmp	.+0      	; 0x20a <LCD_Char+0x4c>
 20a:	00 00       	nop
 20c:	08 95       	ret

0000020e <LCD_String>:

/*

*/
void LCD_String (char *str)		/* Send string to LCD function */
{
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 214:	88 81       	ld	r24, Y
 216:	88 23       	and	r24, r24
 218:	31 f0       	breq	.+12     	; 0x226 <LCD_String+0x18>
 21a:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Char (str[i]);
 21c:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_Char>

*/
void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 220:	89 91       	ld	r24, Y+
 222:	81 11       	cpse	r24, r1
 224:	fb cf       	rjmp	.-10     	; 0x21c <LCD_String+0xe>
	{
		LCD_Char (str[i]);
	}
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <main>:
#include <avr/io.h>
#include "lcd.h"
#include "Keypad.h"
unsigned char key;
int main(void)
{DDRD|=0x0f;
 22c:	81 b3       	in	r24, 0x11	; 17
 22e:	8f 60       	ori	r24, 0x0F	; 15
 230:	81 bb       	out	0x11, r24	; 17
 DDRD&=~0xf0;
 232:	81 b3       	in	r24, 0x11	; 17
 234:	8f 70       	andi	r24, 0x0F	; 15
 236:	81 bb       	out	0x11, r24	; 17
 DDRC|=0x7f;
 238:	84 b3       	in	r24, 0x14	; 20
 23a:	8f 67       	ori	r24, 0x7F	; 127
 23c:	84 bb       	out	0x14, r24	; 20
 PORTD|=0xff;
 23e:	82 b3       	in	r24, 0x12	; 18
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	82 bb       	out	0x12, r24	; 18
 LCD_Init();
 244:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_Init>
    while (1) 
    {	
		key=key_pressed();
 248:	0e 94 49 00 	call	0x92	; 0x92 <key_pressed>
 24c:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <key>
		if (key=='8')
 250:	88 33       	cpi	r24, 0x38	; 56
 252:	a1 f4       	brne	.+40     	; 0x27c <main+0x50>
		{	PORTC|=0x2d;
 254:	85 b3       	in	r24, 0x15	; 21
 256:	8d 62       	ori	r24, 0x2D	; 45
 258:	85 bb       	out	0x15, r24	; 21
			PORTC&=~0x12;
 25a:	85 b3       	in	r24, 0x15	; 21
 25c:	8d 7e       	andi	r24, 0xED	; 237
 25e:	85 bb       	out	0x15, r24	; 21
			LCD_Command(0x80);
 260:	80 e8       	ldi	r24, 0x80	; 128
 262:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_Command>
			LCD_String("Forward                   ");
 266:	81 e7       	ldi	r24, 0x71	; 113
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_String>
			LCD_Command(0xc0);
 26e:	80 ec       	ldi	r24, 0xC0	; 192
 270:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_Command>
			LCD_String("                      ");
 274:	8b ea       	ldi	r24, 0xAB	; 171
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_String>
		}
		if (key=='2')
 27c:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <key>
 280:	82 33       	cpi	r24, 0x32	; 50
 282:	a1 f4       	brne	.+40     	; 0x2ac <main+0x80>
		{PORTC|=0x1e;
 284:	85 b3       	in	r24, 0x15	; 21
 286:	8e 61       	ori	r24, 0x1E	; 30
 288:	85 bb       	out	0x15, r24	; 21
		PORTC&=~0x21;
 28a:	85 b3       	in	r24, 0x15	; 21
 28c:	8e 7d       	andi	r24, 0xDE	; 222
 28e:	85 bb       	out	0x15, r24	; 21
		LCD_Command(0x80);
 290:	80 e8       	ldi	r24, 0x80	; 128
 292:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_Command>
		LCD_String("Backward                 ");
 296:	8c e8       	ldi	r24, 0x8C	; 140
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_String>
		LCD_Command(0xc0);
 29e:	80 ec       	ldi	r24, 0xC0	; 192
 2a0:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_Command>
		LCD_String("                      ");
 2a4:	8b ea       	ldi	r24, 0xAB	; 171
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_String>
		}
		if (key=='4')
 2ac:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <key>
 2b0:	84 33       	cpi	r24, 0x34	; 52
 2b2:	a1 f4       	brne	.+40     	; 0x2dc <main+0xb0>
		{PORTC|=0x05;
 2b4:	85 b3       	in	r24, 0x15	; 21
 2b6:	85 60       	ori	r24, 0x05	; 5
 2b8:	85 bb       	out	0x15, r24	; 21
		PORTC&=~0xfa;
 2ba:	85 b3       	in	r24, 0x15	; 21
 2bc:	85 70       	andi	r24, 0x05	; 5
 2be:	85 bb       	out	0x15, r24	; 21
		
		LCD_Command(0x80);
 2c0:	80 e8       	ldi	r24, 0x80	; 128
 2c2:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_Command>
		LCD_String("Left                       ");
 2c6:	86 ea       	ldi	r24, 0xA6	; 166
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_String>
		LCD_Command(0xc0);
 2ce:	80 ec       	ldi	r24, 0xC0	; 192
 2d0:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_Command>
		LCD_String("                      ");
 2d4:	8b ea       	ldi	r24, 0xAB	; 171
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_String>
		}
		if (key=='6')
 2dc:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <key>
 2e0:	86 33       	cpi	r24, 0x36	; 54
 2e2:	a1 f4       	brne	.+40     	; 0x30c <main+0xe0>
		{PORTC|=0x28;
 2e4:	85 b3       	in	r24, 0x15	; 21
 2e6:	88 62       	ori	r24, 0x28	; 40
 2e8:	85 bb       	out	0x15, r24	; 21
		PORTC&=~0xd7;
 2ea:	85 b3       	in	r24, 0x15	; 21
 2ec:	88 72       	andi	r24, 0x28	; 40
 2ee:	85 bb       	out	0x15, r24	; 21
		
		LCD_Command(0x80);
 2f0:	80 e8       	ldi	r24, 0x80	; 128
 2f2:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_Command>
		LCD_String("Right                 ");
 2f6:	82 ec       	ldi	r24, 0xC2	; 194
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_String>
		LCD_Command(0xc0);
 2fe:	80 ec       	ldi	r24, 0xC0	; 192
 300:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_Command>
		LCD_String("                      ");
 304:	8b ea       	ldi	r24, 0xAB	; 171
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_String>
		}
		if (key=='a')
 30c:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <key>
 310:	81 36       	cpi	r24, 0x61	; 97
 312:	09 f0       	breq	.+2      	; 0x316 <main+0xea>
 314:	99 cf       	rjmp	.-206    	; 0x248 <main+0x1c>
		{PORTC&=~0xff;
 316:	85 b3       	in	r24, 0x15	; 21
 318:	15 ba       	out	0x15, r1	; 21
		LCD_Command(0x80);
 31a:	80 e8       	ldi	r24, 0x80	; 128
 31c:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_Command>
		LCD_String("8->Front 2->Back");
 320:	89 ed       	ldi	r24, 0xD9	; 217
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_String>
		LCD_Command(0xc0);
 328:	80 ec       	ldi	r24, 0xC0	; 192
 32a:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_Command>
		LCD_String("4-right 6-left");
 32e:	8a ee       	ldi	r24, 0xEA	; 234
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_String>
 336:	88 cf       	rjmp	.-240    	; 0x248 <main+0x1c>

00000338 <_exit>:
 338:	f8 94       	cli

0000033a <__stop_program>:
 33a:	ff cf       	rjmp	.-2      	; 0x33a <__stop_program>
