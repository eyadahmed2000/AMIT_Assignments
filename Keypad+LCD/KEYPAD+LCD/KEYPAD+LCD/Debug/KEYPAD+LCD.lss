
KEYPAD+LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000242  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000242  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800070  00800070  000002e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c6c  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000746  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000565  00000000  00000000  00001796  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00001cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d0  00000000  00000000  00001df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000059b  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000275f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 37       	cpi	r26, 0x75	; 117
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 04 01 	call	0x208	; 0x208 <main>
  8a:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <key_pressed>:
 */ 
 #include "Keypad.h"
 unsigned char x[16]={'7','8','9','/','4','5','6','*','1','2','3','-','C','0','=','+'};
 unsigned char col,row,keypress,row_cou;
 unsigned int key_pressed()
 {	for (row=0;row<NUM_row;row++)		//loop to set the (nth) row by zero
  92:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <row>
 {	PORTD|=0x0f;						//set all bits high
	CLR_BIT(PORTD,(row));				//set the bit(4+row)=0
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	70 e0       	ldi	r23, 0x00	; 0
	for (col=0;col<NUM_col;col++)
  9a:	e1 e0       	ldi	r30, 0x01	; 1
 #include "Keypad.h"
 unsigned char x[16]={'7','8','9','/','4','5','6','*','1','2','3','-','C','0','=','+'};
 unsigned char col,row,keypress,row_cou;
 unsigned int key_pressed()
 {	for (row=0;row<NUM_row;row++)		//loop to set the (nth) row by zero
 {	PORTD|=0x0f;						//set all bits high
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	8f 60       	ori	r24, 0x0F	; 15
  a0:	82 bb       	out	0x12, r24	; 18
	CLR_BIT(PORTD,(row));				//set the bit(4+row)=0
  a2:	92 b3       	in	r25, 0x12	; 18
  a4:	9b 01       	movw	r18, r22
  a6:	00 90 73 00 	lds	r0, 0x0073	; 0x800073 <row>
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <key_pressed+0x1e>
  ac:	22 0f       	add	r18, r18
  ae:	33 1f       	adc	r19, r19
  b0:	0a 94       	dec	r0
  b2:	e2 f7       	brpl	.-8      	; 0xac <key_pressed+0x1a>
  b4:	82 2f       	mov	r24, r18
  b6:	80 95       	com	r24
  b8:	89 23       	and	r24, r25
  ba:	82 bb       	out	0x12, r24	; 18
	for (col=0;col<NUM_col;col++)
  bc:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <col>
	{	if (GET_BIT(PIND,(4+col))==0)
  c0:	80 b3       	in	r24, 0x10	; 16
  c2:	28 2f       	mov	r18, r24
  c4:	20 71       	andi	r18, 0x10	; 16
  c6:	84 fd       	sbrc	r24, 4
  c8:	28 c0       	rjmp	.+80     	; 0x11a <key_pressed+0x88>
  ca:	0a c0       	rjmp	.+20     	; 0xe0 <key_pressed+0x4e>
  cc:	80 b3       	in	r24, 0x10	; 16
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	04 2e       	mov	r0, r20
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <key_pressed+0x46>
  d4:	95 95       	asr	r25
  d6:	87 95       	ror	r24
  d8:	0a 94       	dec	r0
  da:	e2 f7       	brpl	.-8      	; 0xd4 <key_pressed+0x42>
  dc:	80 fd       	sbrc	r24, 0
  de:	0e c0       	rjmp	.+28     	; 0xfc <key_pressed+0x6a>
		{	keypress=(row*NUM_col)+col;	
  e0:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <row>
  e4:	ee 0f       	add	r30, r30
  e6:	ee 0f       	add	r30, r30
  e8:	2e 0f       	add	r18, r30
  ea:	20 93 72 00 	sts	0x0072, r18	; 0x800072 <keypress>
			return x[keypress];
  ee:	e2 2f       	mov	r30, r18
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	e0 5a       	subi	r30, 0xA0	; 160
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
  f6:	80 81       	ld	r24, Z
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	08 95       	ret
 unsigned char col,row,keypress,row_cou;
 unsigned int key_pressed()
 {	for (row=0;row<NUM_row;row++)		//loop to set the (nth) row by zero
 {	PORTD|=0x0f;						//set all bits high
	CLR_BIT(PORTD,(row));				//set the bit(4+row)=0
	for (col=0;col<NUM_col;col++)
  fc:	2f 5f       	subi	r18, 0xFF	; 255
  fe:	20 93 71 00 	sts	0x0071, r18	; 0x800071 <col>
 102:	4f 5f       	subi	r20, 0xFF	; 255
 104:	5f 4f       	sbci	r21, 0xFF	; 255
 106:	24 30       	cpi	r18, 0x04	; 4
 108:	09 f7       	brne	.-62     	; 0xcc <key_pressed+0x3a>
 */ 
 #include "Keypad.h"
 unsigned char x[16]={'7','8','9','/','4','5','6','*','1','2','3','-','C','0','=','+'};
 unsigned char col,row,keypress,row_cou;
 unsigned int key_pressed()
 {	for (row=0;row<NUM_row;row++)		//loop to set the (nth) row by zero
 10a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <row>
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <row>
 114:	84 30       	cpi	r24, 0x04	; 4
 116:	10 f2       	brcs	.-124    	; 0x9c <key_pressed+0xa>
			return x[keypress];
		}// if statment curly braces
	}//2nd for loop curly braces
	
 }//1st for loop curly braces
 }// function curly braces
 118:	08 95       	ret
 unsigned char col,row,keypress,row_cou;
 unsigned int key_pressed()
 {	for (row=0;row<NUM_row;row++)		//loop to set the (nth) row by zero
 {	PORTD|=0x0f;						//set all bits high
	CLR_BIT(PORTD,(row));				//set the bit(4+row)=0
	for (col=0;col<NUM_col;col++)
 11a:	e0 93 71 00 	sts	0x0071, r30	; 0x800071 <col>
 11e:	45 e0       	ldi	r20, 0x05	; 5
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	d3 cf       	rjmp	.-90     	; 0xcc <key_pressed+0x3a>

00000126 <LCD_Command>:
Send lower nibble of command.
Give High to Low pulse at Enable (E).
*/
void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);/* Sending upper nibble */
 126:	9b b3       	in	r25, 0x1b	; 27
 128:	9f 70       	andi	r25, 0x0F	; 15
 12a:	28 2f       	mov	r18, r24
 12c:	20 7f       	andi	r18, 0xF0	; 240
 12e:	92 2b       	or	r25, r18
 130:	9b bb       	out	0x1b, r25	; 27
	LCD_Port_Control &= ~ (1<<RS);		/* RS=0, command reg. */
 132:	c1 98       	cbi	0x18, 1	; 24
	LCD_Port_Control |= (1<<EN);		/* Enable pulse */
 134:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	35 e3       	ldi	r19, 0x35	; 53
 138:	3a 95       	dec	r19
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_Command+0x12>
 13c:	00 00       	nop
	_delay_us(10);
	LCD_Port_Control &= ~ (1<<EN);
 13e:	c3 98       	cbi	0x18, 3	; 24
 140:	ef e3       	ldi	r30, 0x3F	; 63
 142:	ff e1       	ldi	r31, 0x1F	; 31
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <LCD_Command+0x1e>
 148:	00 c0       	rjmp	.+0      	; 0x14a <LCD_Command+0x24>
 14a:	00 00       	nop
	_delay_us(2000);
	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);/* Sending lower nibble */
 14c:	2b b3       	in	r18, 0x1b	; 27
 14e:	2f 70       	andi	r18, 0x0F	; 15
 150:	f0 e1       	ldi	r31, 0x10	; 16
 152:	8f 9f       	mul	r24, r31
 154:	c0 01       	movw	r24, r0
 156:	11 24       	eor	r1, r1
 158:	82 2b       	or	r24, r18
 15a:	8b bb       	out	0x1b, r24	; 27
	LCD_Port_Control |= (1<<EN);
 15c:	c3 9a       	sbi	0x18, 3	; 24
 15e:	35 e0       	ldi	r19, 0x05	; 5
 160:	3a 95       	dec	r19
 162:	f1 f7       	brne	.-4      	; 0x160 <LCD_Command+0x3a>
 164:	00 00       	nop
	_delay_us(1);
	LCD_Port_Control &= ~ (1<<EN);
 166:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	8f e3       	ldi	r24, 0x3F	; 63
 16a:	9f e1       	ldi	r25, 0x1F	; 31
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_Command+0x46>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_Command+0x4c>
 172:	00 00       	nop
 174:	08 95       	ret

00000176 <LCD_Init>:
Send any Display ON command (0x0E, 0x0C)
Send 0x06 command (increment cursor)
*/
void LCD_Init (void)  /* LCD Initialize function */
{
	LCD_Dir = 0xFF;		/* Make LCD port direction as o/p */
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	8a bb       	out	0x1a, r24	; 26
	LCD_Dir_Control=0x0F; /* Make LCD port direction as o/p */
 17a:	8f e0       	ldi	r24, 0x0F	; 15
 17c:	87 bb       	out	0x17, r24	; 23
	LCD_Port_Control &= ~(1<<2);
 17e:	c2 98       	cbi	0x18, 2	; 24
 180:	2f ef       	ldi	r18, 0xFF	; 255
 182:	89 ef       	ldi	r24, 0xF9	; 249
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	21 50       	subi	r18, 0x01	; 1
 188:	80 40       	sbci	r24, 0x00	; 0
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <LCD_Init+0x10>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD_Init+0x1a>
 190:	00 00       	nop
	_delay_ms(20);		/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x33);
 192:	83 e3       	ldi	r24, 0x33	; 51
 194:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
	LCD_Command(0x32);	/* Send for 4 bit initialization of LCD  */
 198:	82 e3       	ldi	r24, 0x32	; 50
 19a:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
	LCD_Command(0x28);	/* 2 line, 5*7 matrix in 4-bit mode */
 19e:	88 e2       	ldi	r24, 0x28	; 40
 1a0:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
	LCD_Command(0x0c);	/* Display on cursor off */
 1a4:	8c e0       	ldi	r24, 0x0C	; 12
 1a6:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
	LCD_Command(0x06);	/* Increment cursor (shift cursor to right) */
 1aa:	86 e0       	ldi	r24, 0x06	; 6
 1ac:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
	LCD_Command(0x01);	/* Clear display screen */
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
 1b6:	08 95       	ret

000001b8 <LCD_Char>:
Send lower nibble of data.
Give High to Low pulse at Enable (E).
*/
void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);/* Sending upper nibble */
 1b8:	9b b3       	in	r25, 0x1b	; 27
 1ba:	9f 70       	andi	r25, 0x0F	; 15
 1bc:	28 2f       	mov	r18, r24
 1be:	20 7f       	andi	r18, 0xF0	; 240
 1c0:	92 2b       	or	r25, r18
 1c2:	9b bb       	out	0x1b, r25	; 27
	LCD_Port_Control |= (1<<RS);  /* RS=1, data reg. */
 1c4:	c1 9a       	sbi	0x18, 1	; 24
	LCD_Port_Control|= (1<<EN);
 1c6:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c8:	35 e3       	ldi	r19, 0x35	; 53
 1ca:	3a 95       	dec	r19
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_Char+0x12>
 1ce:	00 00       	nop
	_delay_us(10);
	LCD_Port_Control &= ~ (1<<EN);
 1d0:	c3 98       	cbi	0x18, 3	; 24
 1d2:	ef e1       	ldi	r30, 0x1F	; 31
 1d4:	f3 e0       	ldi	r31, 0x03	; 3
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCD_Char+0x1e>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <LCD_Char+0x24>
 1dc:	00 00       	nop
	_delay_us(200);
	LCD_Port = (LCD_Port & 0x0F) | (data << 4);  /* Sending lower nibble */
 1de:	2b b3       	in	r18, 0x1b	; 27
 1e0:	2f 70       	andi	r18, 0x0F	; 15
 1e2:	f0 e1       	ldi	r31, 0x10	; 16
 1e4:	8f 9f       	mul	r24, r31
 1e6:	c0 01       	movw	r24, r0
 1e8:	11 24       	eor	r1, r1
 1ea:	82 2b       	or	r24, r18
 1ec:	8b bb       	out	0x1b, r24	; 27
	LCD_Port_Control |= (1<<EN);
 1ee:	c3 9a       	sbi	0x18, 3	; 24
 1f0:	35 e3       	ldi	r19, 0x35	; 53
 1f2:	3a 95       	dec	r19
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <LCD_Char+0x3a>
 1f6:	00 00       	nop
	_delay_us(10);
	LCD_Port_Control &= ~ (1<<EN);
 1f8:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	8f e5       	ldi	r24, 0x5F	; 95
 1fc:	9d e6       	ldi	r25, 0x6D	; 109
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <LCD_Char+0x46>
 202:	00 c0       	rjmp	.+0      	; 0x204 <LCD_Char+0x4c>
 204:	00 00       	nop
 206:	08 95       	ret

00000208 <main>:
 #include "lcd.h"
 #include <util/delay.h>
 unsigned char key;

int main(void)
{	DDRD|=0x0f;
 208:	81 b3       	in	r24, 0x11	; 17
 20a:	8f 60       	ori	r24, 0x0F	; 15
 20c:	81 bb       	out	0x11, r24	; 17
	DDRD&=~0xf0;
 20e:	81 b3       	in	r24, 0x11	; 17
 210:	8f 70       	andi	r24, 0x0F	; 15
 212:	81 bb       	out	0x11, r24	; 17
	DDRB|=(1<<0);
 214:	b8 9a       	sbi	0x17, 0	; 23
	PORTD|=0xF0;
 216:	82 b3       	in	r24, 0x12	; 18
 218:	80 6f       	ori	r24, 0xF0	; 240
 21a:	82 bb       	out	0x12, r24	; 18
	PORTD|=0x0F;
 21c:	82 b3       	in	r24, 0x12	; 18
 21e:	8f 60       	ori	r24, 0x0F	; 15
 220:	82 bb       	out	0x12, r24	; 18
	LCD_Init();
 222:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_Init>
    while (1) 
    {	key=key_pressed();
 226:	0e 94 49 00 	call	0x92	; 0x92 <key_pressed>
 22a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <key>
		LCD_Command(0x80);
 22e:	80 e8       	ldi	r24, 0x80	; 128
 230:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
		LCD_Char(key);
 234:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <key>
 238:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_Char>
 23c:	f4 cf       	rjmp	.-24     	; 0x226 <main+0x1e>

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
